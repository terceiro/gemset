#!/bin/sh

# Copyright Â© 2010, Antonio Terceiro <terceiro@softwarelivre.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

gemdir=$(ruby -rrubygems -e 'puts Gem.dir')
target_dir=$(dirname "$gemdir")
ruby_version=$(basename "$gemdir")

gemset_check() {
  if [ -e "$target_dir/$ruby_version" ] && ! [ -h "$target_dir/$ruby_version" ]; then
    echo "$target_dir/$ruby_version is not a symlink, cannot continue."
    echo 'Try running `gemset setup` to prepare your system for using gemset.'
    exit 2
  fi
}

gemset_setup() {
  if [ -h "$target_dir/$ruby_version" ]; then
    echo "gemset is alreay set up. No further configuration needed."
    exit 2
  fi
  if [ -d "$target_dir/$ruby_version" ]; then
    if [ -d "$target_dir/default" ] ; then
      echo "There is already a directory called \"default\" in $target_dir. Cannot continue."
      exit 2
    else
      echo "Your current Rubygems environment was moved to a gemset named \"default\"."
      mv "$target_dir/$ruby_version" "$target_dir/default"
    fi
  else
    mkdir -p "$target_dir/default"
  fi

  gemset_use default
}

gemset_list() {
  for gemset in $(ls -1 $target_dir | grep -v "^$ruby_version$"); do
    if [ "$target_dir/$ruby_version" -ef "$target_dir/$gemset" ]; then
      echo "\033[0;32;40m* $gemset\033[m"
    else
      echo "  $gemset"
    fi
  done
}

gemset_use() {
  gemsetname="$1"
  if [ -e "$target_dir/$gemsetname" ]; then
    rm -f "$target_dir/$ruby_version"
    cd $target_dir && ln -s "$gemsetname" $ruby_version
    echo "Now using gemset \"$gemsetname\"."
  else
    echo "There is no gemset named \"$gemsetname\", cannot use it."
    exit 2
  fi
}

gemset_create() {
  gemsetname="$1"
  if [ -d "$target_dir/$gemsetname" ]; then
    echo "There is already a gemset named \"$gemsetname\", cannot create."
    exit 2
  else
    mkdir -p "$target_dir/$gemsetname"
  fi
}

gemset_remove() {
  gemsetname="$1"
  if [ -d "$target_dir/$gemsetname" ]; then
    if [ "$target_dir/$ruby_version" -ef "$target_dir/$gemsetname" ]; then
      echo "Cannot remove current gemset. Change to another gemset before removing."
      exit 2
    else
      rm -rf "$target_dir/$gemsetname"
    fi
  else
    echo "There is no gemset named \"$gemsetname\", cannot remove."
    exit 2
  fi
}

gemset_show() {
  gemsetname="$1"
  if [ -d "$target_dir/$gemsetname" ]; then
    echo "gemset: $gemsetname"
    GEM_HOME="$target_dir/$gemsetname" gem list
  else
    echo "There is no gemset named \"$gemsetname\", cannot show."
    exit 2
  fi
}

gemset_usage() {
  echo "gemset - manage different sets of Rubygems on your system"
  echo
  echo "Usage:"
  echo
  echo "  gemset list                lists the existing gemsets."
  echo "  gemset create [NAME]       creates a new gemset"
  echo "  gemset remove [NAME]       removes an existing gemset"
  echo "  gemset show [NAME]         shows the gems installed in a gemset"
  echo "  gemset use [NAME]          change to using an existing gemset"
  echo "  gemset help                displays usage information"
  echo
}

command="$1"

if [ "$command" != 'setup' ]; then
  gemset_check
fi

case "$command" in
  list|setup)
    shift
    if ! [ -z "$@" ]; then
      gemset_usage
      exit 1
    fi
    gemset_"$command"
    ;;
  use|create|remove|show)
    shift
    gemsetname="$1"
    if [ -z "$gemsetname" ]; then
      gemset_usage
      exit 1
    fi
    gemset_"$command" "$gemsetname"
    ;;
  usage|help)
    gemset_usage
    ;;
  *)
    gemset_usage
    exit 1
    ;;
esac
